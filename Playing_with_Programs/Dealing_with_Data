Computer software communicates with each other by exchanged variously-formatted data via various communication channels. Learning about this concurrently with learning about security concepts can be overwhelming, and thus, this module tries to prepare you for the latter by covering the former.

In this module, you will learn the different ways data is reasoned about by programs. In the future, this will help you carefully craft that data to break the recipient program's security!


1. What's the password:
	Pretty straightforward, read the /challenge/runme file, the password is shown there in plain sight.
	
2. ... and again!:
	Same as in challenge 1.
	
3. Newline Troubles:
	Same as previous 2 levels but it does not ignore Enter when you press it  on the terminal.
	This leads to the password containing a nwline, we're supposed to find a way of inputting the password without a newline.
	
	The are some ways we can do this:
		1. Find a way to terminate our input without a newline.
		2. How to redirect echo [with arguments to ignore new lines] to the stdin of /challenge/runme (easiest and what we'll do).
		3. Create a file without a newline and redirect the file to the stdin of /challenge/runme.
		
		Solution:
			using option two:
				echo -n "<put password here>" | /challenge/runme
				
4. Reasoning about files:
	In this challenge, after inspecting /challenge/runme, we realise that if takes the input for the password from a file called
	byyf, but byyf does not exist so we have to create it with the password as it's only content.
	Also, the file must not end in a newline.
	
	Solution:
		1. Use: echo -n "<password here>" > byyf
		2. run /challenge/runme in the folder containing byyf.

5. Specifying Filenames.
	This challenge is similar to the previous challenge.
	But in this instance /challenge/runme takes the file containing the password as the first argument when it is run.
	
	Solution:
		1. Save password in a file, with no newline character ofc.
		2. run </challenge/runme file>
		
		
6. Binary and Hex Encoding:
	Solution:
		Convert the password in bytes to it's hexadecimal equivalent.
		
7. More Hex:
	Solution:
		Do same as previous level; change from bytes to hex.
		It's pretty easy if you read through the material before attempting.
		Don't just try to find answers before trynna read and understand.
		
8. Decoding Hex:
	let's decode some hex, rather than encoding it
	NOTE: One of the toughest parts of this challenge is to send raw binary data to it stdin. There are a few ways to do this:

    1. Write a python script to output data to stdout and pipe that to the challenge's stdin! This would involve using the raw byte interface to stdout: sys.stdout.buffer.write().
    2. Write a python script to run the challenge and interact with it directly. Our recommendation is to use pwntools for this: import pwn, p = pwn.process("/challenge/runme"), p.write(), and p.readall(). A pwn.college alumni has created an awesome pwntools cheat sheet that you may reference.
    3. For an increasingly hacky solution, echo -e -n "\xAA\xBB" will print out bytes to stdout that you can pipe.
    
    
    Solution:
    	

